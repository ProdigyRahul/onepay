<!DOCTYPE html>
<html>
<head>
    <title>OnePay Health Status</title>
    <script src="https://cdn.plot.ly/plotly-2.24.1.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: #2563EB;
            color: white;
            min-height: 100vh;
            padding: 2rem;
            line-height: 1.5;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .metric-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 1rem;
            padding: 1.5rem;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: transform 0.2s;
        }

        .metric-card:hover {
            transform: translateY(-2px);
        }

        .metric-label {
            font-size: 0.875rem;
            opacity: 0.8;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            margin-bottom: 0.5rem;
        }

        .metric-value {
            font-size: 2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .metric-subtext {
            font-size: 0.875rem;
            opacity: 0.7;
        }

        .status-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 1rem;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .status-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .status-item:last-child {
            border-bottom: none;
        }

        .status-badge {
            padding: 0.5rem 1rem;
            border-radius: 2rem;
            font-size: 0.875rem;
            font-weight: 500;
            background: rgba(16, 185, 129, 0.2);
            color: #10B981;
        }

        .graph-card {
            background: white;
            border-radius: 1rem;
            padding: 2rem;
            margin-top: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            min-height: 500px;
            width: 100%;
            position: relative;
        }

        #performanceChart {
            width: 100%;
            height: 100%;
            min-height: 450px;
            position: relative;
        }

        .error {
            background: rgba(239, 68, 68, 0.2);
            color: #EF4444;
        }

        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }

            .header h1 {
                font-size: 2rem;
            }

            .metric-value {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè• System Health Status</h1>
        </div>
        
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-label">DB Response</div>
                <div class="metric-value"><%= status.performance.currentDbResponse %></div>
                <div class="metric-subtext">Average: <%= status.performance.averageDbTime %></div>
            </div>
            <div class="metric-card">
                <div class="metric-label">API Response</div>
                <div class="metric-value"><%= status.performance.currentApiResponse %></div>
                <div class="metric-subtext">Average: <%= status.performance.averageApiTime %></div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Uptime</div>
                <div class="metric-value">
                    <%= Math.floor(status.uptime / 86400) %>d <%= Math.floor((status.uptime % 86400) / 3600) %>h <%= Math.floor((status.uptime % 3600) / 60) %>m
                </div>
                <div class="metric-subtext">Since: <%= new Date(status.startedAt).toLocaleString() %></div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Environment</div>
                <div class="metric-value"><%= status.environment %></div>
                <div class="metric-subtext">Last Updated: <%= new Date(status.timestamp).toLocaleString() %></div>
            </div>
        </div>

        <div class="status-card">
            <div class="status-item">
                <strong>Status</strong>
                <span class="status-badge"><%= status.status %></span>
            </div>
            <div class="status-item">
                <strong>Database</strong>
                <span class="status-badge"><%= status.services.database %></span>
            </div>
            <div class="status-item">
                <strong>API Server</strong>
                <span class="status-badge"><%= status.services.api %></span>
            </div>
        </div>
        
        <div class="graph-card">
            <div id="performanceChart">
                <!-- Loading indicator -->
                <div id="chartLoading" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;">
                    <p style="color: #2563EB; font-size: 1.2rem;">Loading performance data...</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Debug logging function
        function debugLog(step, data = null) {
            const timestamp = new Date().toISOString();
            console.log(`[${timestamp}] ${step}`, data || '');
        }

        // Wait for DOM to be ready
        document.addEventListener('DOMContentLoaded', function() {
            debugLog('DOM Content Loaded');
            
            try {
                // Parse the metrics data safely
                debugLog('Parsing metrics data');
                const metricsStr = '<%- JSON.stringify(metrics) %>';
                debugLog('Raw metrics string length:', metricsStr.length);
                
                const metrics = JSON.parse(metricsStr);
                debugLog('Parsed metrics:', {
                    count: metrics.length,
                    firstItem: metrics[0],
                    lastItem: metrics[metrics.length - 1]
                });
                
                if (!metrics || metrics.length === 0) {
                    debugLog('No metrics data available');
                    document.getElementById('performanceChart').innerHTML = `
                        <div style="text-align: center; padding: 2rem; color: #6B7280;">
                            <h3>No Performance Data Available</h3>
                            <p>Data will appear as requests are processed.</p>
                        </div>
                    `;
                    return;
                }

                debugLog('Preparing chart data');
                const apiTrace = {
                    x: metrics.map(m => new Date(m.timestamp)),
                    y: metrics.map(m => m.apiResponseTime),
                    type: 'scatter',
                    mode: 'lines+markers',
                    name: 'API Response Time',
                    line: { 
                        color: '#2563EB',
                        width: 3,
                        shape: 'spline'
                    },
                    marker: {
                        size: 8,
                        color: '#2563EB'
                    },
                    hovertemplate: '<b>API Response</b><br>%{y:.0f}ms<extra></extra>'
                };
                debugLog('API trace prepared', {
                    points: apiTrace.x.length,
                    firstX: apiTrace.x[0],
                    firstY: apiTrace.y[0]
                });

                const dbTrace = {
                    x: metrics.map(m => new Date(m.timestamp)),
                    y: metrics.map(m => m.dbQueryTime),
                    type: 'scatter',
                    mode: 'lines+markers',
                    name: 'DB Query Time',
                    line: { 
                        color: '#10B981',
                        width: 3,
                        shape: 'spline'
                    },
                    marker: {
                        size: 8,
                        color: '#10B981'
                    },
                    hovertemplate: '<b>DB Query</b><br>%{y:.0f}ms<extra></extra>'
                };
                debugLog('DB trace prepared', {
                    points: dbTrace.x.length,
                    firstX: dbTrace.x[0],
                    firstY: dbTrace.y[0]
                });

                const layout = {
                    autosize: true,
                    title: {
                        text: 'Response Times History',
                        font: { 
                            size: 24,
                            color: '#1F2937'
                        }
                    },
                    xaxis: { 
                        title: 'Time',
                        gridcolor: '#E5E7EB',
                        zeroline: false,
                        tickformat: '%H:%M:%S',
                        hoverformat: '%Y-%m-%d %H:%M:%S'
                    },
                    yaxis: { 
                        title: 'Response Time (ms)',
                        gridcolor: '#E5E7EB',
                        zeroline: false
                    },
                    paper_bgcolor: 'white',
                    plot_bgcolor: 'white',
                    font: { 
                        family: 'Inter, sans-serif',
                        color: '#1F2937'
                    },
                    showlegend: true,
                    legend: {
                        orientation: 'h',
                        yanchor: 'bottom',
                        y: -0.2,
                        xanchor: 'center',
                        x: 0.5
                    },
                    hovermode: 'x unified',
                    margin: { t: 60, r: 20, l: 60, b: 60 }
                };
                debugLog('Layout prepared');

                // Check if Plotly is loaded
                debugLog('Checking Plotly availability', { loaded: typeof Plotly !== 'undefined' });

                // Remove loading indicator
                document.getElementById('chartLoading').style.display = 'none';
                debugLog('Removed loading indicator');

                // Create the plot and make it responsive
                debugLog('Starting plot creation');
                Plotly.newPlot('performanceChart', [apiTrace, dbTrace], layout, {
                    responsive: true,
                    displayModeBar: false
                }).then(() => {
                    debugLog('Plot created successfully');
                    // Force a resize after plot is created
                    window.dispatchEvent(new Event('resize'));
                    debugLog('Resize event dispatched');
                }).catch(err => {
                    debugLog('Error creating plot', err);
                    throw err;
                });

                // Handle resize
                window.addEventListener('resize', () => {
                    debugLog('Window resize event');
                    Plotly.Plots.resize('performanceChart');
                });
                
                debugLog('Setup complete');
            } catch (error) {
                debugLog('Error in chart creation', error);
                console.error('Error rendering performance chart:', error);
                document.getElementById('performanceChart').innerHTML = `
                    <div style="text-align: center; padding: 2rem; color: #EF4444;">
                        <h3>Error Loading Performance Data</h3>
                        <p>Please refresh the page to try again.</p>
                        <p style="font-size: 0.9rem; margin-top: 1rem; color: #6B7280;">${error.message}</p>
                        <p style="font-size: 0.8rem; margin-top: 0.5rem; color: #6B7280;">
                            Check browser console for detailed error logs.
                        </p>
                    </div>
                `;
            }
        });

        // Auto-refresh every 30 seconds
        setInterval(() => {
            debugLog('Auto-refresh triggered');
            window.location.reload();
        }, 30000);
    </script>
</body>
</html>
