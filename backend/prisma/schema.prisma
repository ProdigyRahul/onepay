generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  phoneNumber        String               @unique
  email              String?              @unique
  firstName          String
  lastName           String
  password          String?              // Optional for regular users, required for admins
  isVerified         Boolean              @default(false)
  role               Role                 @default(USER)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isActive           Boolean              @default(true)
  onboardingComplete Boolean              @default(false)
  budgets            Budget[]
  financialProfile   FinancialProfile?
  gamification       GamificationProfile?
  kyc                KYC?
  learningProgress   LearningProgress[]
  notifications      Notification[]
  otps               OTP[]
  wallet             Wallet?

  @@index([phoneNumber])
  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model OTP {
  id          String   @id @default(uuid())
  code        String
  phoneNumber String
  userId      String
  expiresAt   DateTime
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([phoneNumber])
  @@index([userId])
  @@index([expiresAt])
  @@map("otps")
}

model KYC {
  id          String    @id @default(uuid())
  userId      String    @unique
  panNumber   String    @unique
  dateOfBirth DateTime
  status      KYCStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  panCardPath String?
  remarks     String?
  verifiedAt  DateTime?
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([panNumber])
  @@index([status])
  @@map("kyc")
}

model FinancialProfile {
  id                       String        @id @default(uuid())
  userId                   String        @unique
  incomeRange              IncomeRange
  targetSpendingPercentage Float
  spendingHabit            SpendingHabit
  targetSavingsPercentage  Float
  primaryGoal              UserGoal
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  user                     User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([incomeRange])
  @@index([primaryGoal])
  @@map("financial_profiles")
}

model Wallet {
  id                String        @id @default(uuid())
  userId            String        @unique
  accountNumber     String        @unique @default(uuid()) 
  balance          Float         @default(0)
  pin              String
  pinAttempts      Int           @default(0)
  isBlocked        Boolean       @default(false)
  blockedUntil     DateTime?
  dailyLimit       Float         @default(10000)
  monthlyLimit     Float         @default(100000)
  currency         String        @default("INR")
  type             String        @default("SAVINGS")
  isActive         Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id])
  transactions     Transaction[]
  sentTransactions     Transaction[] @relation("SenderWallet")
  receivedTransactions Transaction[] @relation("ReceiverWallet")

  @@index([userId])
  @@index([accountNumber])
  @@index([balance])
  @@index([isBlocked])
  @@map("wallets")
}

model Transaction {
  id               String        @id @default(uuid())
  transactionId    String       @unique
  type             TransactionType
  amount           Float
  description      String?
  status           TransactionStatus @default(PENDING)
  metadata         Json?
  walletId         String
  senderWalletId   String?
  receiverWalletId String?
  wallet           Wallet        @relation(fields: [walletId], references: [id])
  senderWallet     Wallet?       @relation("SenderWallet", fields: [senderWalletId], references: [id])
  receiverWallet   Wallet?       @relation("ReceiverWallet", fields: [receiverWalletId], references: [id])
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([transactionId])
  @@index([walletId])
  @@index([senderWalletId])
  @@index([receiverWalletId])
  @@index([type])
  @@index([status])
  @@map("transactions")
}

model Budget {
  id        String          @id @default(uuid())
  userId    String
  category  ExpenseCategory
  amount    Float
  spent     Float           @default(0)
  period    BudgetPeriod
  startDate DateTime
  endDate   DateTime
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([category])
  @@index([period])
  @@map("budgets")
}

model LearningProgress {
  id        String         @id @default(uuid())
  userId    String
  moduleId  String
  progress  Float          @default(0)
  completed Boolean        @default(false)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  module    LearningModule @relation(fields: [moduleId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([moduleId])
  @@index([progress])
  @@map("learning_progress")
}

model LearningModule {
  id          String             @id @default(uuid())
  title       String
  description String
  content     Json
  points      Int                @default(0)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  progress    LearningProgress[]

  @@index([title])
  @@index([points])
  @@map("learning_modules")
}

model GamificationProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  level     Int      @default(1)
  points    Int      @default(0)
  badges    String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([level])
  @@index([points])
  @@map("gamification_profiles")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([read])
  @@map("notifications")
}

model ServerMetrics {
  id              String   @id @default(uuid())
  startTime       DateTime @default(now())
  lastUpdateTime  DateTime @updatedAt
  totalRequests   Int      @default(0)
  activeUsers     Int      @default(0)
  cpuUsage        Float    @default(0)
  memoryUsage     Float    @default(0)
  diskUsage       Float    @default(0)

  @@map("server_metrics")
}

model HistoricalMetric {
  id              String   @id @default(uuid())
  timestamp       DateTime @default(now())
  apiResponseTime Float
  dbQueryTime     Float
  cpuUsage        Float
  memoryUsage     Float
  requestCount    Int

  @@map("historical_metrics")
}

enum Role {
  ADMIN
  USER
}

enum KYCStatus {
  PENDING
  VERIFIED
  REJECTED
  PENDING_VERIFICATION
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransferStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum ExpenseCategory {
  FOOD
  TRANSPORT
  SHOPPING
  BILLS
  ENTERTAINMENT
  HEALTH
  EDUCATION
  OTHER
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum NotificationType {
  TRANSACTION
  BUDGET_ALERT
  SYSTEM
  ACHIEVEMENT
}

enum IncomeRange {
  RANGE_0_25000
  RANGE_25000_100000
  RANGE_100000_300000
  RANGE_300000_PLUS
}

enum SpendingType {
  SPEND_ALL
  SPEND_NONE
  SPEND_SOMETIMES
}

enum PurposeType {
  PAYMENTS
  LOANS
  INVESTMENTS
  TRACKING
}

enum SpendingHabit {
  SPEND_ALL
  SPEND_NONE
  SPEND_SOMETIMES
  SAVE_MOST
}

enum UserGoal {
  EVERYDAY_PAYMENTS
  LOANS
  INVESTMENTS
  TRACK_EXPENSES
}
